datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int        @id @default(autoincrement())
  linkedinId     String     @unique
  email          String     @unique
  name           String
  accessToken    String?
  refreshToken   String?
  profilePicture String?
  profile        Profile?
  favorites      Favorite[]
  matches        Match[]
}

model Profile {
  id             Int          @id @default(autoincrement())
  userId         Int          @unique
  user           User         @relation(fields: [userId], references: [id])
  linkedinUrl    String
  jobTitle       String
  industry       String
  location       String
  summary        String
  profilePicture String?
  skills         Skill[]
  experiences    Experience[]
  projects       Project[]
  traits         Trait[]
}

model Skill {
  id          Int     @id @default(autoincrement())
  name        String
  proficiency Int
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   Int
}

model Experience {
  id           Int       @id @default(autoincrement())
  title        String
  startDate    DateTime
  endDate      DateTime?
  description  String
  achievements String[]
  profile      Profile   @relation(fields: [profileId], references: [id])
  profileId    Int
}

model Project {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime?
  technologies String[]
  outcomes     String[]
  profile      Profile   @relation(fields: [profileId], references: [id])
  profileId    Int
}

model Trait {
  id        Int     @id @default(autoincrement())
  name      String
  score     Float
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Favorite {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  favoritedUserId Int
  createdAt       DateTime @default(now())

  @@unique([userId, favoritedUserId])
}

model Match {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  matchedUserId      Int
  compatibilityScore Float
  traitMatch         Json
  experienceMatch    Json
  projectMatch       Json
  createdAt          DateTime @default(now())

  @@unique([userId, matchedUserId])
}
